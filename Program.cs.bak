            // // Create new heroes
            // Scribe Steve = new Scribe("Steve");
            // Wizard Wanda = new Wizard("Wanda");
            // Ninja Nick = new Ninja("Nick");
            // Samurai Sam = new Samurai("Sam");

            // // Create new enemies
            // Zombie Zeek = new Zombie("Zeek");
            // GiantBaby Timmy = new GiantBaby("Timmy");
            // Spider Slink = new Spider("Slink");
            // Goblin Goblix = new Goblin("Goblix");


            // // Show stats of players at the beginning of the game
            // Console.WriteLine("\n\n============================== Before Attacking ===============================\n");
            // Console.WriteLine("~ ALL PLAYERS ~\n");
            // Console.WriteLine("Player 1: {0}", me.ShowStatus());

            // // Show stats of heroes at the beginning of the game
            // Console.WriteLine("\n~ ALL HEROES ~\n");
            // Console.WriteLine("  Hero 1: {0}", Steve.ShowStatus());
            // Console.WriteLine("  Hero 2: {0}", Wanda.ShowStatus());
            // Console.WriteLine("  Hero 3: {0}", Nick.ShowStatus());
            // Console.WriteLine("  Hero 4: {0}", Sam.ShowStatus());

            // // Show stats of enemies at the beginning of the game
            // Console.WriteLine("\n~ ALL ENEMIES ~\n");
            // Console.WriteLine(" Enemy 1: {0}", Zeek.ShowStatus());
            // Console.WriteLine(" Enemy 2: {0}", Timmy.ShowStatus());
            // Console.WriteLine(" Enemy 3: {0}", Slink.ShowStatus());
            // Console.WriteLine(" Enemy 4: {0}", Goblix.ShowStatus());

            // // Attack round
            // Console.WriteLine("\n=============================== While Attacking ===============================\n");
            // Console.WriteLine("1. Wanda fireballs me.");
            // Wanda.Fireball(me);
            // Console.WriteLine("2. I attack Steve.");
            // me.Attack(Steve);
            // Console.WriteLine("3. Steve stabs Wanda with his quill.");
            // Steve.Quill_Stab(Wanda);
            // Console.WriteLine("4. Sam death blows Wanda. (Suck it Wanda!)");
            // Sam.Death_Blow(Wanda);
            // Console.WriteLine("5. Nick steals from Sam.");
            // Nick.Steal(Sam);

            // // Show stats of players after attacking
            // Console.WriteLine("\n=============================== After Attacking ===============================\n");
            // Console.WriteLine("~ ALL PLAYERS ~\n");
            // Console.WriteLine("Player 1: {0}", me.ShowStatus());

            // // Show stats of heroes after attacking
            // Console.WriteLine("\n~ ALL HEROES ~\n");
            // Console.WriteLine("  Hero 1: {0}", Steve.ShowStatus());
            // Console.WriteLine("  Hero 2: {0}", Wanda.ShowStatus());
            // Console.WriteLine("  Hero 3: {0}", Nick.ShowStatus());
            // Console.WriteLine("  Hero 4: {0}", Sam.ShowStatus());

            // // Show stats of enemies after attacking
            // Console.WriteLine("\n~ ALL ENEMIES ~\n");
            // Console.WriteLine(" Enemy 1: {0}", Zeek.ShowStatus());
            // Console.WriteLine(" Enemy 2: {0}", Timmy.ShowStatus());
            // Console.WriteLine(" Enemy 3: {0}", Slink.ShowStatus());
            // Console.WriteLine(" Enemy 4: {0}", Goblix.ShowStatus());

            // // Heal round
            // Console.WriteLine("\n================================ While Healing ================================\n");
            // Console.WriteLine("1. Wanda uses heal on herself.");
            // Wanda.Heal();
            // Console.WriteLine("2. Sam uses meditate on himself.");
            // Sam.Meditate();

            // // Show stats of players after healing
            // Console.WriteLine("\n================================ After Healing ================================\n");
            // Console.WriteLine("~ ALL PLAYERS ~\n");
            // Console.WriteLine("Player 1: {0}", me.ShowStatus());

            // // Show stats of heroes after healing
            // Console.WriteLine("\n~ ALL HEROES ~\n");
            // Console.WriteLine("  Hero 1: {0}", Steve.ShowStatus());
            // Console.WriteLine("  Hero 2: {0}", Wanda.ShowStatus());
            // Console.WriteLine("  Hero 3: {0}", Nick.ShowStatus());
            // Console.WriteLine("  Hero 4: {0}", Sam.ShowStatus());

            // Testing
            // Actions actions = new Actions();
            // Program New_Game = new Program();
            // New_Game.Start_Game();
            // Samurai.How_Many();
            // Human Jeff = new Human("Jeff");
            // Zombie zeek1 = new Zombie("zeek");
            // Zombie zeek2 = new Zombie("zeek");
            // Zombie zeek3 = new Zombie("zeek");
            // Grenade grenade = new Grenade();
            // Heal_Potion heal = new Heal_Potion();
            // Enrage enrage = new Enrage();
            // grenade.Add();
            // grenade.Add();
            // grenade.Add();
            // heal.Add();
            // grenade.How_Many();
            // heal.How_Many();
            // enrage.How_Many();
            // grenade.Use(zeek1);
            // Console.WriteLine(zeek1.Health);
            // grenade.How_Many();
            // enrage.Use(Jeff);

            // // Create new player of class Human
            // Human me = new Human("Maki");
            // me.Health = 200;



ACTIONS.CS


    public class Actions
    {
        // Properties for Actions class
        public string Player { get; set; }
        public List<string> PlayerActions { get; set; }
        public Dictionary<int, string> KeyMap { get; set; }

        // Constructor for Actions class
        public Actions()
        {
            // Player = player;
            var methods = typeof(Human).GetMethods(System.Reflection.BindingFlags.Public);
            var methods2 = typeof(Human).GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance);
            // var methods2 = typeof(Human).GetMethods();
            Console.WriteLine(methods.Length);
            Console.WriteLine(methods2.Length);
        }
    }